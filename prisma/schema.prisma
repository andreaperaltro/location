// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App relations
  clients    Client[]
  projects   Project[]
  locations  Location[]
  proposals  Proposal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core App Models
model Client {
  id          String   @id @default(cuid())
  userId      String
  name        String
  email       String?
  phone       String?
  address     String?
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]

  @@index([userId])
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  clientId    String?
  title       String
  description String?  @db.Text
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal? @db.Decimal(10, 2)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  client     Client?     @relation(fields: [clientId], references: [id], onDelete: SetNull)
  locations  Location[]
  proposals  Proposal[]

  @@index([userId])
  @@index([clientId])
}

model Location {
  id          String   @id @default(cuid())
  userId      String
  projectId   String
  title       String
  address     String
  lat         Decimal  @db.Decimal(10, 8)
  lng         Decimal  @db.Decimal(11, 8)
  timezone    String   @default("UTC")
  notes       String?  @db.Text
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  photos   Photo[]
  sunTimes SunTime[]
  proposalItems ProposalItem[]

  @@index([userId])
  @@index([projectId])
  @@index([lat, lng])
}

model Photo {
  id        String   @id @default(cuid())
  locationId String
  url       String
  thumbUrl  String?
  takenAt   DateTime
  exifJson  Json?
  lat       Decimal? @db.Decimal(10, 8)
  lng       Decimal? @db.Decimal(11, 8)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location        Location        @relation(fields: [locationId], references: [id], onDelete: Cascade)
  proposalItemPhotos ProposalItemPhoto[]

  @@index([locationId])
  @@index([takenAt])
}

model SunTime {
  id         String   @id @default(cuid())
  locationId String
  date       DateTime @db.Date
  sunrise    DateTime @db.Time
  sunset     DateTime @db.Time
  goldenStart DateTime @db.Time
  goldenEnd  DateTime @db.Time
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, date])
  @@index([locationId])
  @@index([date])
}

model Proposal {
  id        String        @id @default(cuid())
  userId    String
  projectId String
  title     String
  introMd   String?       @db.Text
  outroMd   String?       @db.Text
  status    ProposalStatus @default(DRAFT)
  slug      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  items      ProposalItem[]
  shareLinks ShareLink[]

  @@index([userId])
  @@index([projectId])
  @@index([status])
}

model ProposalItem {
  id         String   @id @default(cuid())
  proposalId String
  locationId String
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  proposal  Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  location  Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  photos    ProposalItemPhoto[]

  @@index([proposalId])
  @@index([locationId])
}

model ProposalItemPhoto {
  id            String @id @default(cuid())
  proposalItemId String
  photoId       String
  order         Int    @default(0)
  createdAt     DateTime @default(now())

  proposalItem ProposalItem @relation(fields: [proposalItemId], references: [id], onDelete: Cascade)
  photo        Photo        @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([proposalItemId, photoId])
  @@index([proposalItemId])
  @@index([photoId])
}

model ShareLink {
  id           String    @id @default(cuid())
  proposalId   String
  token        String    @unique
  expiresAt    DateTime?
  passwordHash String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([token])
  @@index([expiresAt])
}

// Enums
enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ProposalStatus {
  DRAFT
  PUBLISHED
}
